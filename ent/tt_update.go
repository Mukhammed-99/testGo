// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"test-go/ent/pet"
	"test-go/ent/predicate"
	"test-go/ent/tt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// TtUpdate is the builder for updating Tt entities.
type TtUpdate struct {
	config
	hooks    []Hook
	mutation *TtMutation
}

// Where adds a new predicate for the TtUpdate builder.
func (tu *TtUpdate) Where(ps ...predicate.Tt) *TtUpdate {
	tu.mutation.predicates = append(tu.mutation.predicates, ps...)
	return tu
}

// AddIDTtIDs adds the "id_tt" edge to the Pet entity by IDs.
func (tu *TtUpdate) AddIDTtIDs(ids ...int) *TtUpdate {
	tu.mutation.AddIDTtIDs(ids...)
	return tu
}

// AddIDTt adds the "id_tt" edges to the Pet entity.
func (tu *TtUpdate) AddIDTt(p ...*Pet) *TtUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tu.AddIDTtIDs(ids...)
}

// Mutation returns the TtMutation object of the builder.
func (tu *TtUpdate) Mutation() *TtMutation {
	return tu.mutation
}

// ClearIDTt clears all "id_tt" edges to the Pet entity.
func (tu *TtUpdate) ClearIDTt() *TtUpdate {
	tu.mutation.ClearIDTt()
	return tu
}

// RemoveIDTtIDs removes the "id_tt" edge to Pet entities by IDs.
func (tu *TtUpdate) RemoveIDTtIDs(ids ...int) *TtUpdate {
	tu.mutation.RemoveIDTtIDs(ids...)
	return tu
}

// RemoveIDTt removes "id_tt" edges to Pet entities.
func (tu *TtUpdate) RemoveIDTt(p ...*Pet) *TtUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tu.RemoveIDTtIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TtUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(tu.hooks) == 0 {
		affected, err = tu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TtMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tu.mutation = mutation
			affected, err = tu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tu.hooks) - 1; i >= 0; i-- {
			mut = tu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TtUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TtUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TtUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tu *TtUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tt.Table,
			Columns: tt.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tt.FieldID,
			},
		},
	}
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if tu.mutation.IDTtCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tt.IDTtTable,
			Columns: []string{tt.IDTtColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pet.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedIDTtIDs(); len(nodes) > 0 && !tu.mutation.IDTtCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tt.IDTtTable,
			Columns: []string{tt.IDTtColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.IDTtIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tt.IDTtTable,
			Columns: []string{tt.IDTtColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tt.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// TtUpdateOne is the builder for updating a single Tt entity.
type TtUpdateOne struct {
	config
	hooks    []Hook
	mutation *TtMutation
}

// AddIDTtIDs adds the "id_tt" edge to the Pet entity by IDs.
func (tuo *TtUpdateOne) AddIDTtIDs(ids ...int) *TtUpdateOne {
	tuo.mutation.AddIDTtIDs(ids...)
	return tuo
}

// AddIDTt adds the "id_tt" edges to the Pet entity.
func (tuo *TtUpdateOne) AddIDTt(p ...*Pet) *TtUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tuo.AddIDTtIDs(ids...)
}

// Mutation returns the TtMutation object of the builder.
func (tuo *TtUpdateOne) Mutation() *TtMutation {
	return tuo.mutation
}

// ClearIDTt clears all "id_tt" edges to the Pet entity.
func (tuo *TtUpdateOne) ClearIDTt() *TtUpdateOne {
	tuo.mutation.ClearIDTt()
	return tuo
}

// RemoveIDTtIDs removes the "id_tt" edge to Pet entities by IDs.
func (tuo *TtUpdateOne) RemoveIDTtIDs(ids ...int) *TtUpdateOne {
	tuo.mutation.RemoveIDTtIDs(ids...)
	return tuo
}

// RemoveIDTt removes "id_tt" edges to Pet entities.
func (tuo *TtUpdateOne) RemoveIDTt(p ...*Pet) *TtUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tuo.RemoveIDTtIDs(ids...)
}

// Save executes the query and returns the updated Tt entity.
func (tuo *TtUpdateOne) Save(ctx context.Context) (*Tt, error) {
	var (
		err  error
		node *Tt
	)
	if len(tuo.hooks) == 0 {
		node, err = tuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TtMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tuo.mutation = mutation
			node, err = tuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tuo.hooks) - 1; i >= 0; i-- {
			mut = tuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TtUpdateOne) SaveX(ctx context.Context) *Tt {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TtUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TtUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuo *TtUpdateOne) sqlSave(ctx context.Context) (_node *Tt, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tt.Table,
			Columns: tt.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tt.FieldID,
			},
		},
	}
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Tt.ID for update")}
	}
	_spec.Node.ID.Value = id
	if tuo.mutation.IDTtCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tt.IDTtTable,
			Columns: []string{tt.IDTtColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pet.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedIDTtIDs(); len(nodes) > 0 && !tuo.mutation.IDTtCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tt.IDTtTable,
			Columns: []string{tt.IDTtColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.IDTtIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tt.IDTtTable,
			Columns: []string{tt.IDTtColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Tt{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tt.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
