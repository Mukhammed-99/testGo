// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"test-go/ent/tt"

	"github.com/facebook/ent/dialect/sql"
)

// Tt is the model entity for the Tt schema.
type Tt struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TtQuery when eager-loading is set.
	Edges TtEdges `json:"edges"`
}

// TtEdges holds the relations/edges for other nodes in the graph.
type TtEdges struct {
	// IDTt holds the value of the id_tt edge.
	IDTt []*Pet
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// IDTtOrErr returns the IDTt value or an error if the edge
// was not loaded in eager-loading.
func (e TtEdges) IDTtOrErr() ([]*Pet, error) {
	if e.loadedTypes[0] {
		return e.IDTt, nil
	}
	return nil, &NotLoadedError{edge: "id_tt"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Tt) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case tt.FieldID:
			values[i] = &sql.NullInt64{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Tt", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Tt fields.
func (t *Tt) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tt.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		}
	}
	return nil
}

// QueryIDTt queries the "id_tt" edge of the Tt entity.
func (t *Tt) QueryIDTt() *PetQuery {
	return (&TtClient{config: t.config}).QueryIDTt(t)
}

// Update returns a builder for updating this Tt.
// Note that you need to call Tt.Unwrap() before calling this method if this Tt
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Tt) Update() *TtUpdateOne {
	return (&TtClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the Tt entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Tt) Unwrap() *Tt {
	tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Tt is not a transactional entity")
	}
	t.config.driver = tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Tt) String() string {
	var builder strings.Builder
	builder.WriteString("Tt(")
	builder.WriteString(fmt.Sprintf("id=%v", t.ID))
	builder.WriteByte(')')
	return builder.String()
}

// Tts is a parsable slice of Tt.
type Tts []*Tt

func (t Tts) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
